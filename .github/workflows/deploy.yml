name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest --maxfail=1 --disable-warnings

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/telegram_bot .
          docker push ${{ secrets.DOCKER_USERNAME }}/telegram_bot

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_EC2_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_IP }} << 'EOF'
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/telegram_bot
            CONTAINER_NAME="telegram_bot"
            # Check if the container is running and stop/remove it if it exists
            if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then
              echo "Stopping and removing the existing container..."
              sudo docker stop $CONTAINER_NAME
              sudo docker rm $CONTAINER_NAME
            fi
            
            # Run the new container
            echo "Starting the new container..."
            sudo docker run -d --name $CONTAINER_NAME -p 8080:80 -e BOT_TOKEN=${{ secrets.BOT_TOKEN }} choivadim/telegram_bot
        EOF
